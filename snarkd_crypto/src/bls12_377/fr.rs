use ruint::{uint, Uint};
use snarkvm_fields::{Fp256, PoseidonDefaultParameters, PoseidonDefaultParametersEntry};

/// BLS12-377 scalar field.
///
/// Roots of unity computed from modulus and R using this sage code:
///
/// ```ignore
/// q = 8444461749428370424248824938781546531375899335154063827935233455917409239041
/// R = 6014086494747379908336260804527802945383293308637734276299549080986809532403 # Montgomery R
/// s = 47
/// o = q - 1
/// F = GF(q)
/// g = F.multiplicative_generator()
/// assert g.multiplicative_order() == o
/// g2 = g ** (o/2**s)
/// assert g2.multiplicative_order() == 2**s
/// def into_chunks(val, width, n):
///     return [int(int(val) // (2 ** (width * i)) % 2 ** width) for i in range(n)]
/// print("Gen (g % q): ", g % q)
/// print("Gen (g * R % q): ", g * R % q)
/// print("Gen into_chunks(g * R % q): ", into_chunks(g * R % q, 64, 4))
/// print("2-adic gen (g2 % q): ", g2 % q)
/// print("2-adic gen (g2 * R % q): ", g2 * R % q)
/// print("2-adic gen into_chunks(g2 * R % q): ", into_chunks(g2 * R % q, 64, 4))
/// ```
pub type Fr = Uint<256, 4>;

const POWERS_OF_G: &'static [Uint<256, 4>] = &[
    uint!(7550553103602024334975125493733701741804725558747959317959731134235635147227_U256),
    uint!(2426736712223096716690040454781163745329121217182105961450780095846454806933_U256),
    uint!(7262145565060860359900199261463709015779508115142628947528384917326026416094_U256),
    uint!(3808078068525049614289740472596782760038232742112406467092184053649710314798_U256),
    uint!(8053308102911176505682290454775091362575770372752331498701463662290537247815_U256),
    uint!(6273457544692162003831119556805408422297842111808582875258929546672488264429_U256),
    uint!(1908878175455172417031534663965917898181912410075901692870771313709266634658_U256),
    uint!(6430007373874177799050006496675130336369688930425688114015025566689865783171_U256),
    uint!(4565923169794395794680701488261091745754138435524711720501461627715939569405_U256),
    uint!(4698088216716092350663678034822769545746381118735185064794011634701275473477_U256),
    uint!(7107639955054323924025836477581362910123531676424209412732228091406821360591_U256),
    uint!(1143428809486502174649162785588631220233506617635138101676201306883580545245_U256),
    uint!(6661969736299690646099364120787132718931790259671978454726540531639695530804_U256),
    uint!(7494358908018005753699050867867668371079138029241646165484594969182325347974_U256),
    uint!(8023592618106794736850331059027580398177891647397700383265888807327308790994_U256),
    uint!(8167064777010489646866383058955351019363599383041041402218270315933969755456_U256),
    uint!(4968108306635867391544864815397174769014949107081063320473730990256347118931_U256),
    uint!(1583656744794762729084637539897793117917025279046896672099767742640704123169_U256),
    uint!(5895420438657019419626895090640424535157489853263080541827545912299729235333_U256),
    uint!(4740075541253033224589998562420349890539926961488613459621272966886000413066_U256),
    uint!(4372361391637922170115686270508018481727789274993041266190133512464261921507_U256),
    uint!(1929325023208003076100474221444481912739650477822489523997933708713799327071_U256),
    uint!(1277888161114191603199244350778986273492648464488507419439435896557304905444_U256),
    uint!(1108499043736799866403548949193002894217225067957145040192483460774398762483_U256),
    uint!(395836617825562047058426267249964053383069529297507125119242048124656033814_U256),
    uint!(5860443082112728571901716126618652635484760588499751147533455870417568840877_U256),
    uint!(4394477575340825254208930529903097416640033318929164913323083797337718515184_U256),
    uint!(6655010501445240092776324835106764489701610576181395798460725469229712872036_U256),
    uint!(143833216181295269350350912428884844068377551309017947960250191659665387652_U256),
    uint!(1033876875038508851968235037009578130767757090696985046145426344987751233820_U256),
    uint!(8202182930899331103167914916987210217351711145196802749080031724322811626261_U256),
    uint!(6118387923823108256753882845234939760861325266895736900343175505842688216270_U256),
    uint!(7715000358433627285717624185900955233739272726851557525530631600959054049085_U256),
    uint!(7037068887891614228326211307922481546553657918094578974026471721554702847480_U256),
    uint!(1900239651279327116489512710474311941666086647150787076325151660569921142946_U256),
    uint!(1433607442963431421316013573046465495563131275603848750869846912581024913019_U256),
    uint!(866985245235040709753013773884295437521109261361027824514873427502964982922_U256),
    uint!(4443108021371737602697596971902852132274961263160868774409420424726835935922_U256),
    uint!(7230648057878268440511611882767992485465416891455657199765901381639068805022_U256),
    uint!(3007047394428189914303468568563069309375399555829781313999234300434804999455_U256),
    uint!(2252774523953722881297536424069691740647177044028921592024459201778483644059_U256),
    uint!(6821963945538064897924581611421472144776078914389058187104145641528714456127_U256),
    uint!(2044129581458360471194413030819022067476444176988436074573508567144719427532_U256),
    uint!(6638943125734816116533668954109782743742964348031428195244516495664415882670_U256),
    uint!(3279917132858342911831074864712036382710139745724269329239664300762234227201_U256),
    uint!(880904806456922042258150504921383618666682042621506879489_U256),
];

const TWO_ADICITY: u32 = 47;

/// TWO_ADIC_ROOT_OF_UNITY = 8065159656716812877374967518403273466521432693661810619979959746626482506078
/// Encoded in Montgomery form, the value is
/// (8065159656716812877374967518403273466521432693661810619979959746626482506078 * R % q) =
/// 7039866554349711480672062101017509031917008525101396696252683426045173093960
const TWO_ADIC_ROOT_OF_UNITY: Uint<256, 4> =
    uint!(8065159656716812877374967518403273466521432693661810619979959746626482506078_U256);

const CAPACITY: u32 = Self::MODULUS_BITS - 1;

/// GENERATOR = 22
/// Encoded in Montgomery form, so the value is
/// (22 * R) % q = 5642976643016801619665363617888466827793962762719196659561577942948671127251
const GENERATOR: Uint<256, 4> =
    uint!(5642976643016801619665363617888466827793962762719196659561577942948671127251_U256);

const INV: u64 = 725501752471715839u64;

/// MODULUS = 8444461749428370424248824938781546531375899335154063827935233455917409239041
const MODULUS: Uint<256, 4> =
    uint!(8444461749428370424248824938781546531375899335154063827935233455917409239041_U256);

const MODULUS_BITS: u32 = 253;

/// (r - 1)/2 =
/// 4222230874714185212124412469390773265687949667577031913967616727958704619520
const MODULUS_MINUS_ONE_DIV_TWO: Uint<256, 4> =
    uint!(4222230874714185212124412469390773265687949667577031913967616727958704619520_U256);

const R: Uint<256, 4> =
    uint!(6014086494747379908336260804527802945383293308637734276299549080986809532403_U256);

const R2: Uint<256, 4> =
    uint!(508595941311779472113692600146818027278633330499214071737745792929336755579_U256);

const REPR_SHAVE_BITS: u32 = 3;

/// t = (r - 1) / 2^s =
/// 60001509534603559531609739528203892656505753216962260608619555
const T: Uint256<256, 4> =
    uint!(60001509534603559531609739528203892656505753216962260608619555_U256);

/// (t - 1) / 2 =
/// 30000754767301779765804869764101946328252876608481130304309777
const T_MINUS_ONE_DIV_TWO: Uint<256, 4> =
    uint!(30000754767301779765804869764101946328252876608481130304309777_U256);

impl PoseidonDefaultParameters for FrParameters {
    const PARAMS_OPT_FOR_CONSTRAINTS: [PoseidonDefaultParametersEntry; 7] = [
        PoseidonDefaultParametersEntry::new(2, 17, 8, 31, 0),
        PoseidonDefaultParametersEntry::new(3, 17, 8, 31, 0),
        PoseidonDefaultParametersEntry::new(4, 17, 8, 31, 0),
        PoseidonDefaultParametersEntry::new(5, 17, 8, 31, 0),
        PoseidonDefaultParametersEntry::new(6, 17, 8, 31, 0),
        PoseidonDefaultParametersEntry::new(7, 17, 8, 31, 0),
        PoseidonDefaultParametersEntry::new(8, 17, 8, 31, 0),
    ];
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_powers_of_g() {
        let two = Fr::from(2u8);

        // Compute the expected powers of G.
        let g = Fr::from_repr(GENERATOR).unwrap().pow(T);
        let powers = (0..FrParameters::TWO_ADICITY - 1)
            .map(|i| {
                g.pow(two.pow(Fr::from(i as u64).to_repr()).to_repr())
                    .to_repr()
            })
            .collect::<Vec<_>>();

        // Ensure the correct number of powers of G are present.
        assert_eq!(POWERS_OF_G.len() as u64, (TWO_ADICITY - 1) as u64);
        assert_eq!(POWERS_OF_G.len(), powers.len());

        // Ensure the expected and candidate powers match.
        for (expected, candidate) in powers.iter().zip(POWERS_OF_G.iter()) {
            println!("{:?} =?= {:?}", expected, candidate);
            assert_eq!(expected, candidate);
        }
    }
}
