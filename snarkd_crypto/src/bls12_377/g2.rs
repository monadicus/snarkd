use crate::bls12_377::{g1::G1Parameters, group::Group, Fq, Fq2, Fr};
use ruint::uint;

#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub struct G2Parameters;

impl Group for G2Parameters {
    type BaseField = Fq2;

    /// COFACTOR =
    /// 7923214915284317143930293550643874566881017850177945424769256759165301436616933228209277966774092486467289478618404761412630691835764674559376407658497
    const COFACTOR: &'static [u64] = &[
        0x0000000000000001,
        0x452217cc90000000,
        0xa0f3622fba094800,
        0xd693e8c36676bd09,
        0x8c505634fae2e189,
        0xfbb36b00e1dcc40c,
        0xddd88d99a6f6a829,
        0x26ba558ae9562a,
    ];

    /// COFACTOR_INV = COFACTOR^{-1} mod r
    ///              = 6764900296503390671038341982857278410319949526107311149686707033187604810669
    const COFACTOR_INV: Fr = Fr(
        uint!(6764900296503390671038341982857278410319949526107311149686707033187604810669_U256),
    );

    /// AFFINE_GENERATOR_COEFFS = (G2_GENERATOR_X, G2_GENERATOR_Y)
    const AFFINE_GENERATOR_COEFFS: (Self::BaseField, Self::BaseField) =
        (G2_GENERATOR_X, G2_GENERATOR_Y);

    /// WEIERSTRASS_A = [0, 0]
    const A: Fq2 = Fq2 {
        c0: G1Parameters::A,
        c1: G1Parameters::A,
    };

    // As per https://eprint.iacr.org/2012/072.pdf,
    // this curve has b' = b/i, where b is the COEFF_B of G1, and x^6 -i is
    // the irreducible poly used to extend from Fp2 to Fp12.
    // In our case, i = u (App A.3, T_6).
    /// WEIERSTRASS_B = [0,
    /// 155198655607781456406391640216936120121836107652948796323930557600032281009004493664981332883744016074664192874906]
    const B: Fq2 = Fq2 {
        c0: Fq(uint!(0_U384)),
        c1: Fq(
            uint!(155198655607781456406391640216936120121836107652948796323930557600032281009004493664981332883744016074664192874906_U384),
        ),
    };
}

pub const G2_GENERATOR_X: Fq2 = Fq2 {
    c0: G2_GENERATOR_X_C0,
    c1: G2_GENERATOR_X_C1,
};
pub const G2_GENERATOR_Y: Fq2 = Fq2 {
    c0: G2_GENERATOR_Y_C0,
    c1: G2_GENERATOR_Y_C1,
};

///
/// G2_GENERATOR_X_C0 =
/// 170590608266080109581922461902299092015242589883741236963254737235977648828052995125541529645051927918098146183295
///
/// See `snarkvm_algorithms::hash_to_curve::tests::bls12_377` for tests.
///
pub const G2_GENERATOR_X_C0: Fq = Fq(
    uint!(170590608266080109581922461902299092015242589883741236963254737235977648828052995125541529645051927918098146183295_U384),
);

///
/// G2_GENERATOR_X_C1 =
/// 83407003718128594709087171351153471074446327721872642659202721143408712182996929763094113874399921859453255070254
///
/// See `snarkvm_algorithms::hash_to_curve::tests::bls12_377` for tests.
///
pub const G2_GENERATOR_X_C1: Fq = Fq(
    uint!(83407003718128594709087171351153471074446327721872642659202721143408712182996929763094113874399921859453255070254_U384),
);

///
/// G2_GENERATOR_Y_C0 =
/// 1843833842842620867708835993770650838640642469700861403869757682057607397502738488921663703124647238454792872005
///
/// See `snarkvm_algorithms::hash_to_curve::tests::bls12_377` for tests.
///
pub const G2_GENERATOR_Y_C0: Fq = Fq(
    uint!(1843833842842620867708835993770650838640642469700861403869757682057607397502738488921663703124647238454792872005_U384),
);

///
/// G2_GENERATOR_Y_C1 =
/// 33145532013610981697337930729788870077912093258611421158732879580766461459275194744385880708057348608045241477209
///
/// See `snarkvm_algorithms::hash_to_curve::tests::bls12_377` for tests.
///
pub const G2_GENERATOR_Y_C1: Fq = Fq(
    uint!(33145532013610981697337930729788870077912093258611421158732879580766461459275194744385880708057348608045241477209_U384),
);
