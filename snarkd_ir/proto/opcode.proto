// Instructions supported by Snarkd
syntax = "proto3";

import "operand.proto";

package opcode;

// The arguments for a unary operation
message UnaryData {
  // the value to be operated on
  operand.Operand operand = 1;
  // the register to store the result in
  uint32 dest = 2;
}

// The argumnents for a binary operation
message BinaryData {
  // the lhs value of the operation
  operand.Operand lhs = 1;
  // the rhs value of the operation
  operand.Operand rhs = 2;
  // the register to store the result in
  uint32 dest = 3;
}

// The argumnents for a ternary operation
message TernaryData {
  // the condition that operation will use to make its selection
  operand.Operand cond = 1;
  // the lhs value of the operation
  operand.Operand lhs = 2;
  // the rhs value of the operation
  operand.Operand rhs = 3;
  // the register to store the result in
  uint32 dest = 4;
}

// The argumnents for an assertion operation
message AssertData {
  // the lhs value of the operation
  operand.Operand lhs = 1;
  // the rhs value of the operation
  operand.Operand rhs = 2;
}

enum CommitMethod {
  // Computes a BHP commitment on inputs of 256-bit chunks in second, and some
  // randomness in third, storing the commitment in destination. Randomness
  // should always be a Scalar value, and the produced commitment will always
  // be a Field value.
  //
  // The instruction will halt if the given input is smaller than 129 bits.
  CommitBHP256 = 0;
  // Computes a BHP commitment on inputs of 512-bit chunks in first, and some
  // randomness in second, storing the commitment in destination. Randomness
  // should always be a Scalar value, and the produced commitment will always
  // be a Field value.
  //
  // The instruction will halt if the given input is smaller than 171 bits.
  CommitBHP512 = 1;
  // Computes a BHP commitment on inputs of 768-bit chunks in first, and some
  // randomness in second, storing the commitment in destination. Randomness
  // should always be a Scalar value, and the produced commitment will always
  // be a Field value.
  //
  // The instruction will halt if the given input is smaller than 129 bits.
  CommitBHP768 = 2;
  // Computes a BHP commitment on inputs of 1024-bit chunks in first, and some
  // randomness in second, storing the commitment in destination. Randomness
  // should always be a Scalar value, and the produced commitment will always
  // be a Field value.
  //
  // The instruction will halt if the given input is smaller than 171 bits.
  CommitBHP1024 = 3;
  // Computes a Pedersen commitment up to a 64-bit input in first, and some
  // randomness in second, storing the commitment in destination. Randomness
  // should always be a Scalar value, and the produced commitment will always
  // be a Group value.
  //
  // The instruction will halt if the given String or Interface value exceeds
  // the 64-bit limit.
  CommitPED64 = 4;
  // Computes a Pedersen commitment up to a 128-bit input in first, and some
  // randomness in second, storing the commitment in destination. Randomness
  // should always be a Scalar value, and the produced commitment will always
  // be a Group value.
  //
  // The instruction will halt if the given String or Interface value exceeds
  // the 128-bit limit.
  CommitPED128 = 5;
}

message CommitData {
  CommitMethod method = 1;
  operand.Operand chunk = 2;
  operand.Scalar randomness = 3;
  uint32 dest = 4;
}

enum HashMethod {
  // Computes a BHP hash on inputs of 256-bit chunks in second, storing the
  // hash in destination. The produced hash will always be a Field value.
  //
  // The instruction will halt if the given input is smaller than 129 bits.
  HashBHP256 = 0;
  // Computes a BHP hash on inputs of 512-bit chunks in second, storing the
  // hash in destination. The produced hash will always be a Field value.
  //
  // The instruction will halt if the given input is smaller than 171 bits.
  HashBHP512 = 1;
  // Computes a BHP hash on inputs of 768-bit chunks in second, storing the
  // hash in destination. The produced hash will always be a Field value.
  //
  // The instruction will halt if the given input is smaller than 129 bits.
  HashBHP768 = 2;
  // Computes a BHP hash on inputs of 1024-bit chunks in second, storing the
  // hash in destination. The produced hash will always be a Field value.
  //
  // The instruction will halt if the given input is smaller than 171 bits.
  HashBHP1024 = 3;
  // Computes a Pedersen hash up to a 64-bit input in second, storing the hash
  // in destination. The produced hash will always be a Field value.
  //
  // The instruction will halt if the given String or Interface value exceeds
  // the 64-bit limit.
  HashPED64 = 4;
  // Computes a Pedersen hash up to a 128-bit input in second, storing the hash
  // in destination. The produced hash will always be a Field value.
  //
  // The instruction will halt if the given String or Interface value exceeds
  // the 128-bit limit.
  HashPED128 = 5;
  // Calculates a Poseidon hash with an input rate of 2, from an input in
  // first, storing the hash in destination. The produced hash will always be
  // a Field value.
  HashPSD2 = 6;
  // Calculates a Poseidon hash with an input rate of 4, from an input in
  // first, storing the hash in destination. The produced hash will always be
  // a Field value.
  HashPSD4 = 7;
  // Calculates a Poseidon hash with an input rate of 8, from an input in
  // first, storing the hash in destination. The produced hash will always be
  // a Field value.
  HashPSD8 = 8;
}

message HashData {
  HashMethod method = 1;
  operand.Operand chunk = 2;
  uint32 dest = 3;
}

// A Snarkd instruction
message Instruction {
  // the possible instructions supported by SnarkdVM
  oneof Instruction {
    // Computes the absolute value of the input, checking for overflow, storing
    // the result in the destination register.
    //
    // For integer types, a constraint is added to check for underflow. For
    // cases where wrapping semantics are needed, see the abs.w instruction.
    // This underflow happens when the input is the minimum value of a signed
    // integer type. For example, abs -128i8 would result in underflow, since
    // 128 cannot be represented as an i8.
    UnaryData abs = 1;
    // Compute the absolute value of the input, wrapping around at the boundary
    // of the type, and storing the result in the destination register.
    UnaryData abs_wrapped = 2;
    // Adds first with second, storing the outcome in destination.
    //
    // For integer types, a constraint is added to check for overflow. For cases
    // where wrapping semantics are needed for integer types, see the add.w
    // instruction.
    BinaryData add = 3;
    // Adds first with second, wrapping around at the boundary of the type, and
    // storing the outcome in destination.
    BinaryData add_wrapped = 4;
    // Performs an AND operation on integer (bitwise) or boolean first and
    // second, storing the outcome in destination.
    BinaryData and = 5;
    // Checks whether first and second are equal, halting if they are not equal.
    AssertData assert_eq = 6;
    // Checks whether first and second are not equal, halting if they are equal.
    AssertData assert_neq = 7;
    // Computes a specified commit function, the first argument.
    // For further documentation of that function please see
    // the CommitMethod enum.
    CommitData commit = 8;
    // Divides first by second, storing the outcome in destination. Halts on
    // division by zero.
    //
    // For integer types, this operation performs truncated division.
    // Furthermore, a constraint is added to check for underflow. This underflow
    // happens when dividing the minimum value of a signed integer type by -1.
    // For example, div -128i8 -1i8 would result in underflow, since 128 cannot
    // be represented as an i8.
    //
    // For cases where wrapping semantics are needed for integer types, see the
    // div.w instruction.
    BinaryData div = 9;
    // Divides first by second, wrapping around at the boundary of the type, and
    // storing the outcome in destination.
    BinaryData div_wrapped = 10;
    // Doubles the input, storing the outcome in destination.
    UnaryData double = 11;
    // Checks if first is greater than second, storing the result in
    // destination.
    BinaryData gt = 12;
    // Checks if first is greater than or equal to second, storing the result in
    // destination.
    BinaryData gte = 13;
    // Computes a specified hash function, the first argument.
    // For further documentation of that function please see
    // the HashMethod enum.
    HashData hash = 14;
    // Computes a BHP hash on inputs of 256-bit chunks in first, storing the
    // hash in destination. The produced hash will always be a Field value.
    //
    // The instruction will halt if does not follow the specified hash .
    // Computes the multiplicative inverse of the input, storing the outcome in
    // destination.
    UnaryData inv = 15;
    // Compares first and second, storing the result in destination.
    BinaryData is_eq = 16;
    // Returns true if first is not equal to second, storing the result in
    // destination.
    BinaryData is_neq = 17;
    // Checks if first is less than second, storing the outcome in destination.
    BinaryData lt = 18;
    // Checks if first is less than or equal to second, storing the outcome in
    // destination.
    BinaryData lte = 19;
    // Takes the modulus of first with respect to second, storing the outcome in
    // destination. Halts if second is zero.
    //
    // The semantics of this operation are consistent with the mathematical
    // definition of modulo operation.
    BinaryData mod = 20;
    // Multiplies first with second, storing the outcome in destination.
    //
    // For integer types, a constraint is added to check for overflow/underflow.
    // For cases where wrapping semantics are needed for integer types, see the
    // mul.w instruction.
    BinaryData mul = 21;
    // Multiplies first with second, wrapping around at the boundary of the
    // type, and storing the outcome in destination.
    BinaryData mul_wrapped = 22;
    // Returns false only if first and second are true, storing the outcome in
    // destination.
    BinaryData nand = 23;
    // Negates first, storing the outcome in destination.
    //
    // For signed integer types, calling neg on the minimum value is an invalid
    // operation. For example, the input -128i8 would not be valid since 128
    // cannot be represented as an i8.
    UnaryData neg = 24;
    // Returns true when neither first nor second is true, storing the outcome
    // in destination.
    BinaryData nor = 25;
    // Perform a NOT operation on an integer (bitwise) or boolean input, storing
    // the outcome in destination.
    UnaryData not = 26;
    // Performs an OR operation on integer (bitwise) or boolean first and
    // second, storing the outcome in destination.
    BinaryData or = 27;
    // Raises first to the power of second, storing the outcome in destination.
    //
    // For integer types, a constraint is added to check for overflow/underflow.
    // For cases where wrapping semantics are needed for integer types, see the
    // pow.w instruction.
    BinaryData pow = 28;
    // Raises first to the power of second, wrapping around at the boundary of
    // the type, storing the outcome in destination.
    BinaryData pow_wrapped = 29;
    // Computes the truncated remainder of first divided by second, storing the
    // outcome in destination. Halts on division by zero.
    //
    // A constraint is added to check for underflow. This underflow happens when
    // the associated division operation, div, underflows.
    //
    // For cases where wrapping semantics are needed for integer types, see the
    // rem.w instruction.
    BinaryData rem = 30;
    // Computes the truncated remainder of first divided by second, wrapping
    // around at the boundary of the type, and storing the outcome in
    // destination.
    BinaryData rem_wrapped = 31;
    // Shifts first left by second bits, storing the outcome in destination.
    BinaryData shl = 32;
    // Shifts first left by second bits, wrapping around at the boundary of the
    // type, storing the outcome in destination.
    BinaryData shl_wrapped = 33;
    // Shifts first right by second bits, storing the outcome in destination.
    BinaryData shr = 34;
    // Shifts first right by second bits, wrapping around at the boundary of the
    // type, storing the outcome in destination.
    BinaryData shr_wrapped = 35;
    // Squares the input, storing the outcome in destination.
    UnaryData square = 36;
    // Computes the square root of the input, storing the outcome in
    // destination.
    UnaryData sqrt = 37;
    // Computes first - second, storing the outcome in destination.
    BinaryData sub = 38;
    // Computes first - second, wrapping around at the boundary of the type, and
    // storing the outcome in destination.
    BinaryData sub_wrapped = 39;
    // Selects first, if condition is true, otherwise selects second, storing
    // the result in destination.
    //
    // Example: ternary r0 r1 r2 into r3, where r0 is the condition, r1 is
    // first, r2 is second, and r3 is the destination.
    TernaryData ternary = 53;
    // Performs an XOR operation on an integer (bitwise) or boolean first and
    // second, storing the outcome in destination.
    BinaryData xor = 41;
  }
}
